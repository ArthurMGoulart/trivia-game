{"ast":null,"code":"var _jsxFileName = \"/home/budi/Documents/Trybe_Conteudos/trivia-game/trivia-game/src/pages/Jogo.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getTriviaApi, fetchAvatar } from '../utils/utils';\nimport JogoHeader from '../components/JogoHeader';\nimport Pergunta from '../components/Pergunta';\nimport './jogo.css';\n\nclass Jogo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      currentIndex: 0,\n      isLoading: true,\n      seconds: 30,\n      player: {\n        name: props.name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: props.email\n      }\n    };\n    this.getData = this.getData.bind(this);\n    this.tickSecond = this.tickSecond.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.startClock = this.startClock.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n    this.startClock();\n    this.setPlayerLocalStorage();\n  }\n\n  async getData() {\n    const {\n      token,\n      configs\n    } = this.props;\n    const {\n      category,\n      difficulty,\n      type\n    } = configs;\n    let data = await getTriviaApi(token, category, difficulty, type);\n    const MIN_QUESTIONS = 5;\n\n    if (data.length >= MIN_QUESTIONS) {\n      this.setState({\n        questions: data,\n        isLoading: false\n      });\n    } else {\n      data = await getTriviaApi(token);\n      this.setState({\n        questions: data,\n        isLoading: false\n      });\n    }\n  }\n\n  setPlayerLocalStorage() {\n    const {\n      player\n    } = this.state;\n    const objectPlayer = {\n      player\n    };\n    localStorage.setItem('state', JSON.stringify(objectPlayer));\n  }\n\n  setRanking() {\n    const {\n      player: {\n        name,\n        gravatarEmail,\n        score\n      }\n    } = this.state;\n    const rankingStore = localStorage.getItem('ranking');\n    const ranking = JSON.parse(rankingStore);\n    const currentPlayer = {\n      name,\n      score,\n      picture: fetchAvatar(gravatarEmail)\n    };\n\n    if (ranking) {\n      const rankingArray = [...ranking, currentPlayer];\n      localStorage.setItem('ranking', JSON.stringify(rankingArray));\n    } else {\n      const rankingArray = [currentPlayer];\n      localStorage.setItem('ranking', JSON.stringify(rankingArray));\n    }\n  }\n\n  startClock() {\n    const MAGIC_NUMBER = 1000;\n    this.setState({\n      seconds: 30\n    });\n    this.intervalId = setInterval(this.tickSecond, MAGIC_NUMBER);\n  }\n\n  tickSecond() {\n    const {\n      seconds\n    } = this.state;\n\n    if (seconds > 0) {\n      this.setState(prevState => ({\n        seconds: prevState.seconds - 1\n      }));\n    } else {\n      clearInterval(this.intervalId);\n      const nextBtn = document.getElementById('next');\n      nextBtn.hidden = false;\n    }\n  }\n\n  handleClickAnswer(event) {\n    const {\n      target\n    } = event;\n    const alternatives = [...target.parentElement.children];\n    alternatives.forEach(alternative => alternative.classList.add('selected'));\n    alternatives.forEach(alternative => {\n      alternative.disabled = true;\n    });\n\n    if (target.classList.contains('correct')) {\n      this.calculateScore();\n    }\n\n    const nextBtn = document.getElementById('next');\n    nextBtn.hidden = false;\n  }\n\n  handleClickNext() {\n    const {\n      currentIndex\n    } = this.state;\n    const NUMBER_OF_QUESTIONS = 4;\n\n    if (currentIndex < NUMBER_OF_QUESTIONS) {\n      this.setState(prevState => ({\n        currentIndex: prevState.currentIndex + 1\n      }), () => this.startClock());\n      const containerAlternatives = document.getElementById('alternatives-container');\n      const alternatives = [...containerAlternatives.children];\n      alternatives.forEach(alternative => alternative.classList.remove('selected'));\n      alternatives.forEach(alternative => {\n        alternative.disabled = false;\n      });\n      const nextBtn = document.getElementById('next');\n      nextBtn.hidden = true;\n      clearInterval(this.intervalId);\n    } else {\n      this.setRanking();\n      const {\n        history\n      } = this.props;\n      history.push('/feedback');\n    }\n  }\n\n  calculateScore() {\n    const MINIMUN_SCORE = 10;\n    const {\n      questions,\n      currentIndex,\n      seconds\n    } = this.state;\n    const currentQuestion = questions[currentIndex];\n    const {\n      difficulty\n    } = currentQuestion;\n    const difficultValue = this.switchDifficult(difficulty);\n    const assertionScore = MINIMUN_SCORE + seconds * difficultValue;\n    const {\n      name,\n      email\n    } = this.props;\n    this.setState(prevState => ({\n      player: {\n        name,\n        assertions: prevState.player.assertions + 1,\n        score: prevState.player.score + assertionScore,\n        gravatarEmail: email\n      }\n    }), this.setPlayerLocalStorage);\n  }\n\n  switchDifficult(difficulty) {\n    const HARD_VALUE = 3;\n    const MEDIUM_VALUE = 2;\n    const EASY_VALUE = 1;\n\n    switch (difficulty) {\n      case 'hard':\n        return HARD_VALUE;\n\n      case 'medium':\n        return MEDIUM_VALUE;\n\n      case 'easy':\n        return EASY_VALUE;\n\n      default:\n        return 0;\n    }\n  }\n\n  render() {\n    const {\n      player: {\n        score\n      },\n      isLoading,\n      questions,\n      currentIndex,\n      seconds\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"questions text-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }\n    }, !isLoading && /*#__PURE__*/React.createElement(JogoHeader, {\n      score: score,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 26\n      }\n    }), !isLoading && /*#__PURE__*/React.createElement(Pergunta, {\n      questions: questions,\n      currentIndex: currentIndex,\n      seconds: seconds,\n      handleClickAnswer: this.handleClickAnswer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-next text-uppercase fw-bold px-5\",\n      id: \"next\",\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.handleClickNext,\n      hidden: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nJogo.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired\n  }).isRequired,\n  configs: PropTypes.shape().isRequired\n};\n\nconst mapStateToProps = state => ({\n  email: state.game.player.gravatarEmail,\n  name: state.game.player.name,\n  token: state.game.token,\n  configs: state.game.configs\n});\n\nexport default connect(mapStateToProps, null)(Jogo);","map":{"version":3,"sources":["/home/budi/Documents/Trybe_Conteudos/trivia-game/trivia-game/src/pages/Jogo.js"],"names":["React","PropTypes","connect","getTriviaApi","fetchAvatar","JogoHeader","Pergunta","Jogo","Component","constructor","props","state","questions","currentIndex","isLoading","seconds","player","name","assertions","score","gravatarEmail","email","getData","bind","tickSecond","handleClickAnswer","calculateScore","startClock","setRanking","handleClickNext","componentDidMount","setPlayerLocalStorage","token","configs","category","difficulty","type","data","MIN_QUESTIONS","length","setState","objectPlayer","localStorage","setItem","JSON","stringify","rankingStore","getItem","ranking","parse","currentPlayer","picture","rankingArray","MAGIC_NUMBER","intervalId","setInterval","prevState","clearInterval","nextBtn","document","getElementById","hidden","event","target","alternatives","parentElement","children","forEach","alternative","classList","add","disabled","contains","NUMBER_OF_QUESTIONS","containerAlternatives","remove","history","push","MINIMUN_SCORE","currentQuestion","difficultValue","switchDifficult","assertionScore","HARD_VALUE","MEDIUM_VALUE","EASY_VALUE","render","propTypes","string","isRequired","shape","func","mapStateToProps","game"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getTriviaApi, fetchAvatar } from '../utils/utils';\nimport JogoHeader from '../components/JogoHeader';\nimport Pergunta from '../components/Pergunta';\nimport './jogo.css';\n\nclass Jogo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      currentIndex: 0,\n      isLoading: true,\n      seconds: 30,\n      player: {\n        name: props.name,\n        assertions: 0,\n        score: 0,\n        gravatarEmail: props.email,\n      },\n    };\n    this.getData = this.getData.bind(this);\n    this.tickSecond = this.tickSecond.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.calculateScore = this.calculateScore.bind(this);\n    this.startClock = this.startClock.bind(this);\n    this.setRanking = this.setRanking.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n  }\n\n  componentDidMount() {\n    this.getData();\n    this.startClock();\n    this.setPlayerLocalStorage();\n  }\n\n  async getData() {\n    const { token, configs } = this.props;\n    const { category, difficulty, type } = configs;\n    let data = await getTriviaApi(token, category, difficulty, type);\n    const MIN_QUESTIONS = 5;\n    if (data.length >= MIN_QUESTIONS) {\n      this.setState({\n        questions: data,\n        isLoading: false,\n      });\n    } else {\n      data = await getTriviaApi(token);\n      this.setState({\n        questions: data,\n        isLoading: false,\n      });\n    }\n  }\n\n  setPlayerLocalStorage() {\n    const { player } = this.state;\n    const objectPlayer = {\n      player,\n    };\n    localStorage.setItem('state', JSON.stringify(objectPlayer));\n  }\n\n  setRanking() {\n    const { player: { name, gravatarEmail, score } } = this.state;\n    const rankingStore = localStorage.getItem('ranking');\n    const ranking = JSON.parse(rankingStore);\n    const currentPlayer = {\n      name,\n      score,\n      picture: fetchAvatar(gravatarEmail),\n    };\n    if (ranking) {\n      const rankingArray = [...ranking, currentPlayer];\n      localStorage.setItem('ranking', JSON.stringify(rankingArray));\n    } else {\n      const rankingArray = [currentPlayer];\n      localStorage.setItem('ranking', JSON.stringify(rankingArray));\n    }\n  }\n\n  startClock() {\n    const MAGIC_NUMBER = 1000;\n    this.setState({\n      seconds: 30,\n    });\n    this.intervalId = setInterval(this.tickSecond, MAGIC_NUMBER);\n  }\n\n  tickSecond() {\n    const { seconds } = this.state;\n    if (seconds > 0) {\n      this.setState((prevState) => ({\n        seconds: prevState.seconds - 1,\n      }));\n    } else {\n      clearInterval(this.intervalId);\n      const nextBtn = document.getElementById('next');\n      nextBtn.hidden = false;\n    }\n  }\n\n  handleClickAnswer(event) {\n    const { target } = event;\n    const alternatives = [...target.parentElement.children];\n    alternatives.forEach((alternative) => alternative.classList.add('selected'));\n    alternatives.forEach((alternative) => {\n      alternative.disabled = true;\n    });\n\n    if (target.classList.contains('correct')) {\n      this.calculateScore();\n    }\n    const nextBtn = document.getElementById('next');\n    nextBtn.hidden = false;\n  }\n\n  handleClickNext() {\n    const { currentIndex } = this.state;\n    const NUMBER_OF_QUESTIONS = 4;\n    if (currentIndex < NUMBER_OF_QUESTIONS) {\n      this.setState((prevState) => ({\n        currentIndex: prevState.currentIndex + 1,\n      }), () => this.startClock());\n      const containerAlternatives = document.getElementById('alternatives-container');\n      const alternatives = [...containerAlternatives.children];\n      alternatives.forEach((alternative) => alternative.classList.remove('selected'));\n      alternatives.forEach((alternative) => {\n        alternative.disabled = false;\n      });\n      const nextBtn = document.getElementById('next');\n      nextBtn.hidden = true;\n      clearInterval(this.intervalId);\n    } else {\n      this.setRanking();\n      const { history } = this.props;\n      history.push('/feedback');\n    }\n  }\n\n  calculateScore() {\n    const MINIMUN_SCORE = 10;\n    const { questions, currentIndex, seconds } = this.state;\n    const currentQuestion = questions[currentIndex];\n    const { difficulty } = currentQuestion;\n    const difficultValue = this.switchDifficult(difficulty);\n    const assertionScore = MINIMUN_SCORE + (seconds * difficultValue);\n    const { name, email } = this.props;\n    this.setState((prevState) => ({\n      player: {\n        name,\n        assertions: prevState.player.assertions + 1,\n        score: prevState.player.score + assertionScore,\n        gravatarEmail: email,\n      },\n    }), this.setPlayerLocalStorage);\n  }\n\n  switchDifficult(difficulty) {\n    const HARD_VALUE = 3;\n    const MEDIUM_VALUE = 2;\n    const EASY_VALUE = 1;\n    switch (difficulty) {\n    case 'hard':\n      return HARD_VALUE;\n    case 'medium':\n      return MEDIUM_VALUE;\n    case 'easy':\n      return EASY_VALUE;\n    default:\n      return 0;\n    }\n  }\n\n  render() {\n    const { player: { score }, isLoading, questions, currentIndex, seconds } = this.state;\n    return (\n      <div className=\"questions text-center\">\n        { (!isLoading && <JogoHeader score={ score } />) }\n        { (!isLoading\n            && <Pergunta\n              questions={ questions }\n              currentIndex={ currentIndex }\n              seconds={ seconds }\n              handleClickAnswer={ this.handleClickAnswer }\n            />) }\n        <button\n          className=\"btn btn-next text-uppercase fw-bold px-5\"\n          id=\"next\"\n          data-testid=\"btn-next\"\n          type=\"button\"\n          onClick={ this.handleClickNext }\n          hidden\n        >\n          Próxima\n        </button>\n      </div>\n    );\n  }\n}\nJogo.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  token: PropTypes.string.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func.isRequired,\n  }).isRequired,\n  configs: PropTypes.shape().isRequired,\n};\nconst mapStateToProps = (state) => ({\n  email: state.game.player.gravatarEmail,\n  name: state.game.player.name,\n  token: state.game.token,\n  configs: state.game.configs,\n});\nexport default connect(mapStateToProps, null)(Jogo);\n"]},"metadata":{},"sourceType":"module"}